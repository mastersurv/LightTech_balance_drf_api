import os
import re
from datetime import datetime, timedelta
from collections import defaultdict, Counter
from django.core.management.base import BaseCommand
from django.conf import settings


class Command(BaseCommand):
    help = '–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π'

    def add_arguments(self, parser):
        parser.add_argument(
            '--days',
            type=int,
            default=7,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 7)'
        )
        parser.add_argument(
            '--type',
            choices=['security', 'transactions', 'all'],
            default='all',
            help='–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤'
        )

    def handle(self, *args, **options):
        days = options['days']
        analysis_type = options['type']
        
        logs_dir = os.path.join(settings.BASE_DIR, 'logs')
        
        if not os.path.exists(logs_dir):
            self.stdout.write(
                self.style.ERROR('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.')
            )
            return

        self.stdout.write(
            self.style.SUCCESS(f'–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π...\n')
        )

        if analysis_type in ['security', 'all']:
            self.analyze_security_logs(logs_dir, days)
            
        if analysis_type in ['transactions', 'all']:
            self.analyze_transaction_logs(logs_dir, days)

    def analyze_security_logs(self, logs_dir, days):
        """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        security_log_path = os.path.join(logs_dir, 'security.log')
        
        if not os.path.exists(security_log_path):
            self.stdout.write(
                self.style.WARNING('–§–∞–π–ª security.log –Ω–µ –Ω–∞–π–¥–µ–Ω')
            )
            return

        self.stdout.write(self.style.SUCCESS('=== –ê–ù–ê–õ–ò–ó –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ==='))
        
        login_attempts = defaultdict(int)
        failed_logins = defaultdict(int)
        suspicious_activities = []
        rate_limit_violations = []
        admin_actions = []
        
        cutoff_date = datetime.now() - timedelta(days=days)
        
        try:
            with open(security_log_path, 'r', encoding='utf-8') as f:
                for line in f:
                    if not line.strip():
                        continue
                    
                    date_match = re.match(r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})', line)
                    if date_match:
                        log_date = datetime.strptime(date_match.group(1), '%Y-%m-%d %H:%M:%S')
                        if log_date < cutoff_date:
                            continue
                    
                    if 'LOGIN_SUCCESS' in line:
                        user_match = re.search(r'user=(\w+)', line)
                        if user_match:
                            login_attempts[user_match.group(1)] += 1
                    
                    elif 'LOGIN_FAILED' in line:
                        user_match = re.search(r'username=(\w+)', line)
                        if user_match:
                            failed_logins[user_match.group(1)] += 1
                    
                    elif 'RATE_LIMIT_EXCEEDED' in line:
                        rate_limit_violations.append(line.strip())
                    
                    elif 'ADMIN_' in line:
                        admin_actions.append(line.strip())
                    
                    elif any(suspicious in line for suspicious in [
                        'LARGE_DEPOSIT_ATTEMPT', 'LARGE_TRANSFER_ATTEMPT',
                        'SELF_TRANSFER_ATTEMPT', 'INSUFFICIENT_FUNDS'
                    ]):
                        suspicious_activities.append(line.strip())

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ security.log: {str(e)}')
            )
            return

        self.stdout.write(f'\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ö–æ–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É:')
        for user, count in sorted(login_attempts.items(), key=lambda x: x[1], reverse=True)[:10]:
            self.stdout.write(f'  {user}: {count} —É—Å–ø–µ—à–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤')

        if failed_logins:
            self.stdout.write(f'\n‚ö†Ô∏è  –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞:')
            for user, count in sorted(failed_logins.items(), key=lambda x: x[1], reverse=True)[:10]:
                self.stdout.write(f'  {user}: {count} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫')

        if suspicious_activities:
            self.stdout.write(f'\nüö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ({len(suspicious_activities)} —Å–æ–±—ã—Ç–∏–π):')
            for activity in suspicious_activities[-5:]:
                self.stdout.write(f'  {activity}')

        if rate_limit_violations:
            self.stdout.write(f'\n‚ö° –ü—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ ({len(rate_limit_violations)} —Å–æ–±—ã—Ç–∏–π):')
            for violation in rate_limit_violations[-3:]:
                self.stdout.write(f'  {violation}')

        if admin_actions:
            self.stdout.write(f'\nüë§ –î–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ({len(admin_actions)} —Å–æ–±—ã—Ç–∏–π):')
            for action in admin_actions[-5:]:
                self.stdout.write(f'  {action}')

    def analyze_transaction_logs(self, logs_dir, days):
        """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        transaction_log_path = os.path.join(logs_dir, 'transactions.log')
        
        if not os.path.exists(transaction_log_path):
            self.stdout.write(
                self.style.WARNING('–§–∞–π–ª transactions.log –Ω–µ –Ω–∞–π–¥–µ–Ω')
            )
            return

        self.stdout.write(self.style.SUCCESS('\n=== –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ==='))
        
        user_deposits = defaultdict(float)
        user_transfers_out = defaultdict(float)
        user_transfers_in = defaultdict(float)
        total_volume = 0.0
        transaction_count = 0
        
        cutoff_date = datetime.now() - timedelta(days=days)
        
        try:
            with open(transaction_log_path, 'r', encoding='utf-8') as f:
                for line in f:
                    if not line.strip():
                        continue
                    
                    date_match = re.match(r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})', line)
                    if date_match:
                        log_date = datetime.strptime(date_match.group(1), '%Y-%m-%d %H:%M:%S')
                        if log_date < cutoff_date:
                            continue
                    
                    if 'DEPOSIT_SUCCESS' in line:
                        user_match = re.search(r'user=(\w+)', line)
                        amount_match = re.search(r'amount=([0-9.]+)', line)
                        if user_match and amount_match:
                            user = user_match.group(1)
                            amount = float(amount_match.group(1))
                            user_deposits[user] += amount
                            total_volume += amount
                            transaction_count += 1
                    
                    elif 'TRANSFER_SUCCESS' in line:
                        sender_match = re.search(r'sender=(\w+)', line)
                        recipient_match = re.search(r'recipient=(\w+)', line)
                        amount_match = re.search(r'amount=([0-9.]+)', line)
                        
                        if sender_match and recipient_match and amount_match:
                            sender = sender_match.group(1)
                            recipient = recipient_match.group(1)
                            amount = float(amount_match.group(1))
                            
                            user_transfers_out[sender] += amount
                            user_transfers_in[recipient] += amount
                            total_volume += amount
                            transaction_count += 1

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ transactions.log: {str(e)}')
            )
            return

        self.stdout.write(f'\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
        self.stdout.write(f'  –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {transaction_count}')
        self.stdout.write(f'  –û–±—â–∏–π –æ–±—ä–µ–º: {total_volume:.2f} ‚ÇΩ')
        if transaction_count > 0:
            self.stdout.write(f'  –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: {total_volume/transaction_count:.2f} ‚ÇΩ')

        if user_deposits:
            self.stdout.write(f'\nüí∞ –¢–æ–ø –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:')
            for user, amount in sorted(user_deposits.items(), key=lambda x: x[1], reverse=True)[:5]:
                self.stdout.write(f'  {user}: {amount:.2f} ‚ÇΩ')

        if user_transfers_out:
            self.stdout.write(f'\nüì§ –¢–æ–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π:')
            for user, amount in sorted(user_transfers_out.items(), key=lambda x: x[1], reverse=True)[:5]:
                self.stdout.write(f'  {user}: {amount:.2f} ‚ÇΩ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')

        if user_transfers_in:
            self.stdout.write(f'\nüì• –¢–æ–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:')
            for user, amount in sorted(user_transfers_in.items(), key=lambda x: x[1], reverse=True)[:5]:
                self.stdout.write(f'  {user}: {amount:.2f} ‚ÇΩ –ø–æ–ª—É—á–µ–Ω–æ')

        self.stdout.write('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω') 